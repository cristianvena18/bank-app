version: '2.2'
services:
  api:
    container_name: api
    build: ../server
    hostname: api
    depends_on:
      - apm-server
    ports:
      - '3000:3000'
    volumes:
      - ../server:/usr/src/service/server
    working_dir: /usr/src/service/server
    command: 'yarn start'
    networks:
      - elk

  mysql:
    image: mysql:8.0
    hostname: mysql
    container_name: mysql
    ports:
      - '3306:3306'
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./mysql-config:/etc/mysql/conf.d
    command: --default-authentication-plugin=mysql_native_password --port=3306
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: database
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      USER: 1000
    networks:
        - elk

  redis:
    image: redis
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
    networks:
      - elk

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - 8080:8080
    networks:
      - elk
  
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=docker-cluster
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - esdata:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    networks:
    - elk
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  apm-server:
    container_name: apm
    image: docker.elastic.co/apm/apm-server:7.12.1
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - '8200:8200'
    networks:
    - elk
    command: >
        apm-server -e
          -E apm-server.rum.enabled=true
          -E setup.kibana.host=kibana:5601
          -E setup.template.settings.index.number_of_replicas=0
          -E apm-server.kibana.enabled=true
          -E apm-server.kibana.host=kibana:5601
          -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  logstash:
    container_name: logstash
    build:
      context: ../logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ../logstash/config:/usr/share/logstash/config
      - ../logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.12.1
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
    - 5601:5601
    networks:
    - elk
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

networks:
  elk:
    driver: bridge

volumes:
  esdata:
    driver: local



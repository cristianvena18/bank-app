version: '3.2'

services:
  api:
    container_name: api
    build: ../server
    hostname: api
    depends_on:
      - mysql
      - redis
    ports:
      - '3000:3000'
    volumes:
      - ../server:/usr/src/service/server
    working_dir: /usr/src/service/server
    command: 'yarn start'
    networks:
      - elk
  
  adminer:
    container_name: adminer
    image: adminer:latest
    ports:
      - "8080:8080"
    networks:
      - elk

  redis:
    image: redis
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - ../docker/redis/data:/data
      - ../docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
    networks:
      - elk

  mysql:
    image: mysql:8.0
    hostname: mysql
    container_name: mysql
    ports:
      - '3306:3306'
    volumes:
      - ../docker/mysql-data:/var/lib/mysql
      - ../docker/mysql-config:/etc/mysql/conf.d
    command: --default-authentication-plugin=mysql_native_password --port=3306
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: database
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      USER: 1000
    networks:
        - elk

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    hostname: elastic
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9199:9200"
      - "9299:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5043:5044"
      - "4999:5000/tcp"
      - "4999:5000/udp"
      - "9599:9600"
      - "28777:28777"
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana
    hostname: kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5600:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  apm-server:
    container_name: apm
    build:
      context: extensions/apm-server/
      args:
        ELK_VERSION: $ELK_VERSION
    command:
        # Disable strict permission checking on 'apm-server.yml' configuration file
        # https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - type: bind
        source: ./extensions/apm-server/config/apm-server.yml
        target: /usr/share/apm-server/apm-server.yml
        read_only: true
    ports:
      - '8199:8200'
    networks:
      - elk
    depends_on:
      - elasticsearch

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
